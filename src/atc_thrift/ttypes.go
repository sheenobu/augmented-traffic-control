// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package atc_thrift

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type PlatformType int64

const (
	PlatformType_OTHER PlatformType = 0
	PlatformType_LINUX PlatformType = 1
)

func (p PlatformType) String() string {
	switch p {
	case PlatformType_OTHER:
		return "PlatformType_OTHER"
	case PlatformType_LINUX:
		return "PlatformType_LINUX"
	}
	return "<UNSET>"
}

func PlatformTypeFromString(s string) (PlatformType, error) {
	switch s {
	case "PlatformType_OTHER":
		return PlatformType_OTHER, nil
	case "PlatformType_LINUX":
		return PlatformType_LINUX, nil
	}
	return PlatformType(math.MinInt32 - 1), fmt.Errorf("not a valid PlatformType string")
}

type Delay struct {
	Delay       int32   `thrift:"delay,1"`
	Jitter      int32   `thrift:"jitter,2"`
	Correlation float64 `thrift:"correlation,3"`
}

func NewDelay() *Delay {
	return &Delay{
		Jitter: 0,

		Correlation: 0,
	}
}

func (p *Delay) IsSetJitter() bool {
	return p.Jitter != 0
}

func (p *Delay) IsSetCorrelation() bool {
	return p.Correlation != 0
}

func (p *Delay) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Delay) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Delay = v
	}
	return nil
}

func (p *Delay) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Jitter = v
	}
	return nil
}

func (p *Delay) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Correlation = v
	}
	return nil
}

func (p *Delay) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Delay"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Delay) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("delay", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:delay: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Delay)); err != nil {
		return fmt.Errorf("%T.delay (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:delay: %s", p, err)
	}
	return err
}

func (p *Delay) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetJitter() {
		if err := oprot.WriteFieldBegin("jitter", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:jitter: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Jitter)); err != nil {
			return fmt.Errorf("%T.jitter (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:jitter: %s", p, err)
		}
	}
	return err
}

func (p *Delay) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCorrelation() {
		if err := oprot.WriteFieldBegin("correlation", thrift.DOUBLE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:correlation: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Correlation)); err != nil {
			return fmt.Errorf("%T.correlation (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:correlation: %s", p, err)
		}
	}
	return err
}

func (p *Delay) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Delay(%+v)", *p)
}

type Loss struct {
	Percentage  float64 `thrift:"percentage,1"`
	Correlation float64 `thrift:"correlation,2"`
}

func NewLoss() *Loss {
	return &Loss{
		Correlation: 0,
	}
}

func (p *Loss) IsSetCorrelation() bool {
	return p.Correlation != 0
}

func (p *Loss) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Loss) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Percentage = v
	}
	return nil
}

func (p *Loss) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Correlation = v
	}
	return nil
}

func (p *Loss) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Loss"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Loss) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("percentage", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:percentage: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Percentage)); err != nil {
		return fmt.Errorf("%T.percentage (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:percentage: %s", p, err)
	}
	return err
}

func (p *Loss) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCorrelation() {
		if err := oprot.WriteFieldBegin("correlation", thrift.DOUBLE, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:correlation: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Correlation)); err != nil {
			return fmt.Errorf("%T.correlation (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:correlation: %s", p, err)
		}
	}
	return err
}

func (p *Loss) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Loss(%+v)", *p)
}

type Reorder struct {
	Percentage  float64 `thrift:"percentage,1"`
	Gap         int32   `thrift:"gap,2"`
	Correlation float64 `thrift:"correlation,3"`
}

func NewReorder() *Reorder {
	return &Reorder{
		Gap: 0,

		Correlation: 0,
	}
}

func (p *Reorder) IsSetCorrelation() bool {
	return p.Correlation != 0
}

func (p *Reorder) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Reorder) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Percentage = v
	}
	return nil
}

func (p *Reorder) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Gap = v
	}
	return nil
}

func (p *Reorder) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Correlation = v
	}
	return nil
}

func (p *Reorder) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Reorder"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Reorder) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("percentage", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:percentage: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Percentage)); err != nil {
		return fmt.Errorf("%T.percentage (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:percentage: %s", p, err)
	}
	return err
}

func (p *Reorder) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("gap", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:gap: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Gap)); err != nil {
		return fmt.Errorf("%T.gap (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:gap: %s", p, err)
	}
	return err
}

func (p *Reorder) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCorrelation() {
		if err := oprot.WriteFieldBegin("correlation", thrift.DOUBLE, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:correlation: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Correlation)); err != nil {
			return fmt.Errorf("%T.correlation (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:correlation: %s", p, err)
		}
	}
	return err
}

func (p *Reorder) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Reorder(%+v)", *p)
}

type Corruption struct {
	Percentage  float64 `thrift:"percentage,1"`
	Correlation float64 `thrift:"correlation,2"`
}

func NewCorruption() *Corruption {
	return &Corruption{
		Percentage: 0,

		Correlation: 0,
	}
}

func (p *Corruption) IsSetCorrelation() bool {
	return p.Correlation != 0
}

func (p *Corruption) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Corruption) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Percentage = v
	}
	return nil
}

func (p *Corruption) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Correlation = v
	}
	return nil
}

func (p *Corruption) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Corruption"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Corruption) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("percentage", thrift.DOUBLE, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:percentage: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Percentage)); err != nil {
		return fmt.Errorf("%T.percentage (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:percentage: %s", p, err)
	}
	return err
}

func (p *Corruption) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCorrelation() {
		if err := oprot.WriteFieldBegin("correlation", thrift.DOUBLE, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:correlation: %s", p, err)
		}
		if err := oprot.WriteDouble(float64(p.Correlation)); err != nil {
			return fmt.Errorf("%T.correlation (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:correlation: %s", p, err)
		}
	}
	return err
}

func (p *Corruption) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Corruption(%+v)", *p)
}

type LinkShaping struct {
	Rate       int32       `thrift:"rate,1"`
	Delay      *Delay      `thrift:"delay,2"`
	Loss       *Loss       `thrift:"loss,3"`
	Reorder    *Reorder    `thrift:"reorder,4"`
	Corruption *Corruption `thrift:"corruption,5"`
}

func NewLinkShaping() *LinkShaping {
	return &LinkShaping{
		Delay: &Delay{
			Delay: 0},

		Loss: &Loss{
			Percentage: 0},

		Reorder: &Reorder{
			Percentage: 0},

		Corruption: &Corruption{
			Percentage: 0},
	}
}

func (p *LinkShaping) IsSetDelay() bool {
	return p.Delay != nil
}

func (p *LinkShaping) IsSetLoss() bool {
	return p.Loss != nil
}

func (p *LinkShaping) IsSetReorder() bool {
	return p.Reorder != nil
}

func (p *LinkShaping) IsSetCorruption() bool {
	return p.Corruption != nil
}

func (p *LinkShaping) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *LinkShaping) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Rate = v
	}
	return nil
}

func (p *LinkShaping) readField2(iprot thrift.TProtocol) error {
	p.Delay = NewDelay()
	if err := p.Delay.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Delay)
	}
	return nil
}

func (p *LinkShaping) readField3(iprot thrift.TProtocol) error {
	p.Loss = NewLoss()
	if err := p.Loss.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Loss)
	}
	return nil
}

func (p *LinkShaping) readField4(iprot thrift.TProtocol) error {
	p.Reorder = NewReorder()
	if err := p.Reorder.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Reorder)
	}
	return nil
}

func (p *LinkShaping) readField5(iprot thrift.TProtocol) error {
	p.Corruption = NewCorruption()
	if err := p.Corruption.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Corruption)
	}
	return nil
}

func (p *LinkShaping) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("LinkShaping"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *LinkShaping) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("rate", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:rate: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Rate)); err != nil {
		return fmt.Errorf("%T.rate (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:rate: %s", p, err)
	}
	return err
}

func (p *LinkShaping) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Delay != nil {
		if p.IsSetDelay() {
			if err := oprot.WriteFieldBegin("delay", thrift.STRUCT, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:delay: %s", p, err)
			}
			if err := p.Delay.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Delay)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:delay: %s", p, err)
			}
		}
	}
	return err
}

func (p *LinkShaping) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Loss != nil {
		if p.IsSetLoss() {
			if err := oprot.WriteFieldBegin("loss", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:loss: %s", p, err)
			}
			if err := p.Loss.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Loss)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:loss: %s", p, err)
			}
		}
	}
	return err
}

func (p *LinkShaping) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Reorder != nil {
		if p.IsSetReorder() {
			if err := oprot.WriteFieldBegin("reorder", thrift.STRUCT, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:reorder: %s", p, err)
			}
			if err := p.Reorder.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Reorder)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:reorder: %s", p, err)
			}
		}
	}
	return err
}

func (p *LinkShaping) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Corruption != nil {
		if p.IsSetCorruption() {
			if err := oprot.WriteFieldBegin("corruption", thrift.STRUCT, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:corruption: %s", p, err)
			}
			if err := p.Corruption.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Corruption)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:corruption: %s", p, err)
			}
		}
	}
	return err
}

func (p *LinkShaping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LinkShaping(%+v)", *p)
}

type Shaping struct {
	Up   *LinkShaping `thrift:"up,1"`
	Down *LinkShaping `thrift:"down,2"`
}

func NewShaping() *Shaping {
	return &Shaping{}
}

func (p *Shaping) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Shaping) readField1(iprot thrift.TProtocol) error {
	p.Up = NewLinkShaping()
	if err := p.Up.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Up)
	}
	return nil
}

func (p *Shaping) readField2(iprot thrift.TProtocol) error {
	p.Down = NewLinkShaping()
	if err := p.Down.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Down)
	}
	return nil
}

func (p *Shaping) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Shaping"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Shaping) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Up != nil {
		if err := oprot.WriteFieldBegin("up", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:up: %s", p, err)
		}
		if err := p.Up.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Up)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:up: %s", p, err)
		}
	}
	return err
}

func (p *Shaping) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Down != nil {
		if err := oprot.WriteFieldBegin("down", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:down: %s", p, err)
		}
		if err := p.Down.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Down)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:down: %s", p, err)
		}
	}
	return err
}

func (p *Shaping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Shaping(%+v)", *p)
}

type AtcdInfo struct {
	Platform PlatformType `thrift:"platform,1"`
	Version  string       `thrift:"version,2"`
}

func NewAtcdInfo() *AtcdInfo {
	return &AtcdInfo{
		Platform: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *AtcdInfo) IsSetPlatform() bool {
	return int64(p.Platform) != math.MinInt32-1
}

func (p *AtcdInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AtcdInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Platform = PlatformType(v)
	}
	return nil
}

func (p *AtcdInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Version = v
	}
	return nil
}

func (p *AtcdInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AtcdInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AtcdInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatform() {
		if err := oprot.WriteFieldBegin("platform", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:platform: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Platform)); err != nil {
			return fmt.Errorf("%T.platform (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:platform: %s", p, err)
		}
	}
	return err
}

func (p *AtcdInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:version: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Version)); err != nil {
		return fmt.Errorf("%T.version (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:version: %s", p, err)
	}
	return err
}

func (p *AtcdInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AtcdInfo(%+v)", *p)
}

type ShapingGroup struct {
	Id      int64    `thrift:"id,1"`
	Members []string `thrift:"members,2"`
	Shaping *Shaping `thrift:"shaping,3"`
}

func NewShapingGroup() *ShapingGroup {
	return &ShapingGroup{}
}

func (p *ShapingGroup) IsSetShaping() bool {
	return p.Shaping != nil
}

func (p *ShapingGroup) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ShapingGroup) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *ShapingGroup) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Members = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem0 = v
		}
		p.Members = append(p.Members, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *ShapingGroup) readField3(iprot thrift.TProtocol) error {
	p.Shaping = NewShaping()
	if err := p.Shaping.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Shaping)
	}
	return nil
}

func (p *ShapingGroup) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ShapingGroup"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ShapingGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *ShapingGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Members != nil {
		if err := oprot.WriteFieldBegin("members", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:members: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Members)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Members {
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:members: %s", p, err)
		}
	}
	return err
}

func (p *ShapingGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Shaping != nil {
		if p.IsSetShaping() {
			if err := oprot.WriteFieldBegin("shaping", thrift.STRUCT, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:shaping: %s", p, err)
			}
			if err := p.Shaping.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", p.Shaping)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:shaping: %s", p, err)
			}
		}
	}
	return err
}

func (p *ShapingGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ShapingGroup(%+v)", *p)
}
